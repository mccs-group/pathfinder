Как запустить:
cd pathfinder
sh deploy.sh # скрипт установит нужную версию Java и GLL4Graph (клон репозитория)
cd front
build/core tests/spaced/<name_of_test> -spaced_rhs -iguana

Входные данные: граф и грамматика, формат входных тестов показан на примере: 
1
6 - количество правил в грамматике
S S S
S A R
R S B            - правила, 0 = epsilon
S 0
A a
B b

4 5 - количество вершин и ребер
fn_0_basic_block_0_0 fn_0_basic_block_1_0 fn_0_basic_block_2_0 fn_1_basic_block_0_0 - метки вершин
0 1 a 
1 2 a
2 0 a           - списки ребер с метками, метки могут быть строками
2 3 b
3 2 b
Если у ребра нет метки, то на месте метки ничего не писать.
Входные тесты необходимо поместить в директорию /pathfinder/front/tests/spaced.

На выходе будут выведены сначала 1 число: число пар достижимых вершин, а потом - список найденных путей, 1 строка = 1 путь.
Пример:
9 - число пар достижимых вершин
(0, epsilon, 0)
(1, epsilon, 1)
(2, epsilon, 2)
(3, epsilon, 3)
(1, a, 2) (2, a, 0) (0, a, 1) (1, a, 2) (2, epsilon, 2) (2, b, 3) (3, b, 2) (2, b, 3) (3, b, 2)
(2, a, 0) (0, a, 1) (1, a, 2) (2, epsilon, 2) (2, b, 3) (3, b, 2) (2, b, 3)
(0, a, 1) (1, a, 2) (2, epsilon, 2) (2, b, 3) (3, b, 2)
(1, a, 2) (2, epsilon, 2) (2, b, 3)
(0, a, 1) (1, a, 2) (2, a, 0) (0, a, 1) (1, a, 2) (2, epsilon, 2) (2, b, 3) (3, b, 2) (2, b, 3) (3, b, 2) (2, b, 3)
Если у ребра нет метки, вместо метки будет выведено other.
Если нужные пути не удалось найти, то есть их ноль, будет просто выведен 0.
Файл pathfinder/core/config/config содержит 2 числа, первое число - количество warm up итераций (прогревочных запусков,
измерения времени не проводятся), второе число - количество итераций (замеряемых прогонов). Это нужно для исследований
времени, затраченного на каждую итерацию, поэтому если Вам нужен только список путей при заданных входных грамматике и
графе, не обращайте внимания на данную информацию и не вносите изменения в данный файл. Если Вас интересует время работы
программы, рекомендуется разработчиками GLL4Graph выставить количествоо warm up итераций (первое число) равным 2, а 
количество итераций (второе число) - по Вашему усмотрению.
Если Вы хотите вывести время поиска путей, используйте флаг -time, например:
build/core tests/spaced/<name_of_test> -spaced_rhs -iguana -time
В результате будут выведены для каждой замеряемой итерации prepare_time - время подгрузки набора входных данных, которые уже
находятся в виде, требующимся для GLL4Graph, run_time - время работы алгоритма поиска путей, answer - число пар достижимых
вершин. Пример (для 5 итераций):
prepare_time,run_time,answer
№1: 0.001885913,0.001229239,9
№2: 0.001933513,0.001186621,9
№3: 0.001898141,0.001056028,9
№4: 0.001861476,0.001317384,9
№5: 0.001803702,0.001037291,9
